{"version":3,"sources":["App.tsx","serviceWorker.ts","providers/theme.ts","index.tsx"],"names":["App","inputRef","React","createRef","useState","name","setName","value","setValue","onChange","e","a","file","current","files","split","slice","join","fileToString","data","parseHeaderAndContent","headerString","contentString","headers","parseHeaders","rows","parseRows","types","getArffTypes","arrf","parseToArff","Container","className","maxWidth","Paper","style","padding","Grid","container","spacing","item","xs","type","ref","TextField","variant","multiline","fullWidth","rowsMax","target","Button","color","disabled","Boolean","onClick","downloadString","Promise","resolve","reject","reader","FileReader","onload","result","readAsText","csvString","replace","map","header","trim","row","field","index","isNaN","Number","values","Set","forEach","has","add","Array","from","filter","relation","arffAttributes","blob","Blob","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","location","hostname","match","defaultMuiTheme","createMuiTheme","overrides","MuiCssBaseline","width","height","background","palette","primary","main","borderRadius","dark","ReactDOM","render","StrictMode","ThemeProvider","theme","CssBaseline","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30c9069f.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Paper, Grid, TextField, Button } from '@material-ui/core'\n\nconst App = () => {\n  const inputRef = React.createRef<HTMLInputElement>()\n\n  const [name, setName] = React.useState('')\n  const [value, setValue] = React.useState<string>('')\n  const onChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = inputRef.current?.files?.[0]\n    if(!file) return\n\n    const name = file.name.split('.csv').slice(0, -1).join()\n    setName(name)\n    const data = await fileToString(file)\n\n    const { headerString, contentString } = parseHeaderAndContent(data)\n\n    const headers = parseHeaders(headerString)\n    const rows = parseRows(contentString)\n\n    const types = getArffTypes({ headers, rows })\n    \n    const arrf = parseToArff(name, types, contentString)\n    setValue(arrf)\n  }\n  const download = () => {\n    if(value) downloadString(`${name}.arrf`, value)\n  }\n\n  return (\n    <Container className=\"App\" maxWidth='md'>\n      <Paper style={{ padding: 16 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <input type='file' ref={inputRef} onChange={onChange} />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant='outlined'\n              multiline\n              fullWidth\n              rows={6}\n              rowsMax={25}\n              value={value}\n              onChange={e => setValue(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              variant='contained'\n              color='primary'\n              disabled={!Boolean(value || name)}\n              onClick={download}\n            >\n              download\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Container>\n  )\n}\n\nexport default App;\n\nconst fileToString = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    \n    reader.onload = e => {\n      const data = e.target?.result\n      if(!data) reject('No data')\n      resolve(data as string)\n    }\n    reader.readAsText(file)\n  })\n}\n\nconst parseHeaderAndContent = (csvString: string): { headerString: string, contentString: string } => {\n  const headerString = csvString.split('\\n')[0]\n  const contentString = csvString.split('\\n').slice(1).join('\\n')\n  return { headerString, contentString }\n}\n\nconst parseHeaders = (headerString: string): string[] => {\n  return headerString.replace(/\"/g, '').replace(/\\n/g, '').split(',').map(header => header.trim())\n}\nconst parseRows = (contentString: string) => {\n  return contentString.split('\\n').map(row => row.split(',') || '?')\n}\n\nconst getArffTypes = ({ headers, rows }: { headers: string[], rows: string[][] }) => {\n  const firstRow = rows[0]\n  const types = firstRow.map((field, index) => {\n    const name = headers[index]\n    const type = isNaN(Number(field))\n        ? 'enum'\n        : Number(field) % 1 === 0 ? 'integer' : 'real'\n    const values: Set<string> = new Set()\n    \n    return { name, type, values }\n  })\n  for(const row of rows) {\n    types.forEach((type, index) => {\n      if(type.type !== 'enum') return\n      if(type.values.has(row[index])) return\n\n      type.values.add(row[index].trim())\n    })\n  }\n  const cleanedTypes = types.map(type => {\n    return {\n      ...type,\n      values: Array.from(type.values).filter(value => value !== '?')\n    }\n  })\n\n  return cleanedTypes\n}\n\nconst parseToArff = (relation: string, types: any, data: string) => {\n  const arffAttributes = types\n    .map((type: any) => {\n      const value = type.type !== 'enum' ? type.type : `{${type.values.join(',')}}`\n      return `@attribute '${type.name}' ${value}`\n    })\n    .join(`\\n`)\n\n  return `@relation ${relation}\\n${arffAttributes}\\n@data\\n${data}`\n}\n\nconst downloadString = (name: string, data: string) => {\n  const blob = new Blob([data])\n  // @ts-ignore\n  if(window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveBlob(blob, name)\n  }\n  else{\n      var elem = window.document.createElement('a')\n      elem.href = window.URL.createObjectURL(blob)\n      elem.download = name\n      document.body.appendChild(elem)\n      elem.click()\n      document.body.removeChild(elem)\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core'\n\nconst defaultMuiTheme = createMuiTheme()\nexport default createMuiTheme({\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        '*': {\n          'scrollbar-width': 'thin',\n        },\n        '*::-webkit-scrollbar': { width: 10, height: 10 },\n        '::-webkit-scrollbar-thumb': {\n          background: defaultMuiTheme.palette.primary.main,\n          borderRadius: 10,\n        },\n        '::-webkit-scrollbar-thumb:hover': {\n          background: defaultMuiTheme.palette.primary.dark,\n        },\n      },\n    },\n  }\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport * as serviceWorker from 'serviceWorker'\n\n\nimport { ThemeProvider, CssBaseline } from '@material-ui/core'\nimport theme from 'providers/theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}